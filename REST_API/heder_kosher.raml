#%RAML 1.0
title: Heder Kosher Server API
version: v0.1
baseUri: http://localhost:8080 #http://server/api/{version} #???????
mediaType: application/json
securitySchemes:
  oauth_2_0:
    description: |
      Server supports OAuth 2.0 for authenticating all API requests.
    type: OAuth 2.0
    describedBy:
      headers:
        Authorization:
          description: |
             Used to send a valid OAuth 2 access token.
             Do not use the "access_token" query string parameter.
          type: string
      responses:
        401:
          description: |
              Bad or expired token. This can happen if the user or Server
              revoked or expired an access token. To fix, re-authenticate
              the user.
        403:
          description: |
              Bad OAuth request (wrong consumer key, bad nonce, expired
              timestamp...). Unfortunately, re-authenticating the user won't help here.
    settings:
      authorizationUri: https://server/api/{version}/oauth2/authorize
      accessTokenUri: https://server/api/{version}/oauth2/token
      authorizationGrants: [ password, client_credentials, authorization_code, implicit ] #???????????????????
securedBy: [ oauth_2_0 ]
traits:
  roomSpecified:
      usage: Apply this to any method that needs a room id to be specified
      description: Some requests require room
      headers:
        X-HK-Room:
          description: Room identification number
          type: number
          example: 123
          required: true
  roleSpecified:
      usage: Apply this to any method that needs a roleAccessId to be specified
      description: Results of some request will be different depend on role
      headers:
        X-HK-RoleAccessId:
          description: Access role id
          type: string
          example: LIST_ROLE
          required: true
resourceTypes:
  collection:
    description: Collection of available <<resourcePathName>>
    get:
        description: Get lisf of <<resourcePathName>>
        responses:
          200:
            body:
    post:
        description: Add a new <<resourcePathName|!singularize>>
        body:
            #schema: <<resourcePathName|!singularize>>
        responses:
          200:
            body:
              example: |
                { "message": "The <<resourcePathName|!singularize>> has been properly added" }
    delete:
        description: Delete all <<resourcePathName>>
        responses:
          200:
            body:
              example: |
                 { "message": "All <<resourcePathName>> has been deleted" }
  collection-item:
    description: Entity representing a <<resourcePathName|!singularize>>
    get:
        description: Get the <<resourcePathName|!singularize>> with <<resourcePathName|!singularize>>Id = {<<resourcePathName|!singularize>>Id}
        responses:
          200:
            body:
          404:
            body:
              example: |
                {"message": "<<resourcePathName|!singularize>> not found" }
    put:
      description: Update the <<resourcePathName|!singularize>> with <<resourcePathName|!singularize>>Id = {<<resourcePathName|!singularize>>Id}
      body:
      responses:
        200:
          body:
            example: |
              { "message": "The <<resourcePathName|!singularize>> has been properly updated" }
    delete:
      description: Delete the <<resourcePathName|!singularize>> with <<resourcePathName|!singularize>>Id = {<<resourcePathName|!singularize>>Id}
      responses:
          200:
            body:
              example: |
                { "message": "The <<resourcePathName|!singularize>> has been deleted" }
/rooms:
  type:
    collection:
  /{roomId}:
    type:
      collection-item:
/users:
  displayName: Application users
  get:
    description: Get collection of application users
    queryParameters:
      role:
        displayName: Role
        type: string
        description: User role code
        required: false
        example: LIST_ROLE
      room:
        displayName: Room
        type: number
        description: Room id
        required: false
        example: 123
      name:
        displayName: Name
        type: string
        description: User name (substring in name, family name)
        required: false
        minLength: 3
        example: Smith
  post:
    description: Add a new user (User and Person info must be specified)
    body:
      example: |
          {}
  /{userId}:
    get:
      description: Get user information (login, isLocked)
    put:
      description: Change user password (hash)
    delete:
      description: Delete user
    /person:
      get:
        description: Get user person information (name, passportNo, sex, age, etc.)
      /contacts:
        get:
          description: Get collection of person contacts
          queryParameters:
            type:
              displayName: Type
              description: Contact type (e-mail, mobile phone, fax)
              type: string
              required: false
              example: EMAIL
    /roles:
      get:
        description: Get collection of user roles (Role-Room)
      post:
        description: Add a role to user
        body:
          example: |
              {roomId, roleId}
/programs:
  type:
    collection:
  get:
    is: [ roomSpecified ]
  /{programId}:
    type:
      collection-item:
    get:
      description: Get program info with all tasks #????????????????????
    /tasks:
      get:
        description: Get collection of tasks from program with programId = {programId}
      post:
        description: Add task to program with programId = {programId}
      delete:
        description: Delete all tasks from program with programId = {programId}
    /assignees:
      type:
        collection:
      get:
        description: Get list of program assignees
      post:
        description: Assign the program with programId = {programId} to user
        body:
      delete:
        description: Unassign the program with programId = {programId} from all users
/tasks:
  get:
    description: Get collection of task patterns #??????????????????????????
  post:
    description: Add a new task pattern
  delete:
    description: Delete all task patterns
  /{taskId}:
    type:
      collection-item:
#    get:
#      description: Get task with taskId = {taskId} (pattern and not)
#    put:
#      description: Update task with taskId = {taskId}
#    delete:
#      description: Delete task with taskId = {taskId}